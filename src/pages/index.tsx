// import './globals.css'
import Head from "next/head";
import { useState } from "react";
import { prisma } from "@/server/prisma";
import { Post } from "@prisma/client";


type Props = {
  posts: Post[];
};

export default function Home({ posts }: Props) {
  const [content, setContent] = useState("");

  const createPost = async () => {
    try {
      const response = await fetch("/api/create", {
        method: "POST",
        body: JSON.stringify({ content }),
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();
      if (!response.ok) return alert(data.message || "Something went wrong!");
      document.location.reload();
    } catch (error) {
      console.error(error);
      alert("An error occurred, check the console.");
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center min-h-screen">
        <div className="w-500 flex flex-col p-20">
          <textarea
            placeholder="Write a post..."
            className="p-4 text-xl"
            value={content}
            onChange={(e) => setContent(e.target.value)}
          />

          <button
            className="p-4 text-xl mt-4 bg-blue-500 text-white rounded-lg cursor-pointer outline-none"
            onClick={createPost}
          >
            Post
          </button>
        </div>

        <div className="w-500 flex flex-col">
          {posts.map((post) => (
            <div
              key={post.id}
              className="p-4 text-xl mt-4 cursor-pointer outline-none"
            >
              {post.content}
            </div>
          ))}
        </div>
      </main>

    </>
  );
}

export async function getServerSideProps() {
  const posts = await prisma.post.findMany();

  return {
    props: {
      posts: JSON.parse(JSON.stringify(posts)),
    },
  };
}
